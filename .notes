#local phpunit
./vendor/bin/phpunit test

Notes
learning to code travels from understandibility to changability -> more abstractions + complexity
every changability imprveoment (DRY, composition, DI) has a complexity cost
suggest - only use abstractions when they insist on being created
<more concrete -----x sweet spot------ more abstract>
1) how hard to write? 2) how hard to read? 3) how hard to change?
if you are capable of writing a smart and complex solution, it is imcumbent to accept the harder task of writing simpler code
DRYing out code is not free. It adds a level of indirection, and layers of indirection make things harder to understand
tests
    as tests get more specific, code should become more generic.
    'shameless green' = optimising for understandibility not changability
    don't dry before completing the test suite, you might uncover the wrong abstraction (a bit of early duplication is fine)