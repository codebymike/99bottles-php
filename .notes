#local phpunit
./vendor/bin/phpunit test

Notes
learning to code travels from understandibility to changability -> more abstractions + complexity
every changability imprveoment (DRY, composition, DI) has a complexity cost
suggest - only use abstractions when they insist on being created
<more concrete -----x sweet spot------ more abstract>
1) how hard to write? 2) how hard to read? 3) how hard to change?
if you are capable of writing a smart and complex solution, it is imcumbent to accept the harder task of writing simpler code
DRYing out code is not free. It adds a level of indirection, and layers of indirection make things harder to understand
tests
    as tests get more specific, code should become more generic.
    'shameless green' = optimising for understandibility not changability
    don't dry before completing the test suite, you might uncover the wrong abstraction (a bit of early duplication is fine)
'conditionals breed'
[S]ingle responsibility - methods in a class should be cohesive around a single purpose
[O]pen-closed - objects should be open for extension, but closed for modification
[L]iskov substituion - subclasses should be substitutable with their superclasses
[I]nterface-segregation - objects shouldnb't be forced to depend on methods they don't need
[D]ependecy-inversion - depend on abstractions not on concretrion
Open-closed:
    if not open (easy to implement required change) - remove the easiest to fix, or best understood CODE SMELL
"Flocking Rules"
    1. Select the things that are most alike.
    2. Find the smallest difference between them.
    3. Make the simplest change that will remove that difference.